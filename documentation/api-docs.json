{"openapi":"3.0.1","info":{"title":"Social Media API","description":"This API exposes endpoints to manage social media.","contact":{"name":"Nikita Aksenov","url":"https://github.com/Nikitaks","email":"n.aksenov2015@yandex.ru"},"license":{"name":"No License informatin","url":"#"},"version":"1.0"},"servers":[{"url":"http://localhost:8080","description":"Server URL in Development environment"}],"security":[{"Bearer Authentication":[]}],"tags":[{"name":"API Controller","description":"Social media API controller, which realizes full functional"}],"paths":{"/post/new":{"post":{"tags":["API Controller"],"summary":"Posting new public messages","operationId":"newPost","requestBody":{"description":"To post the message, id, user and dateAndTime fields is ignored and may be absent","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Post"}}},"required":true},"responses":{"201":{"description":"Message created succeccfully","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Response"}}}}},"400":{"description":"User not exists","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Response"}}}}}}}},"/message/send/{userId}":{"post":{"tags":["API Controller"],"summary":"Sends message to user with path userId","operationId":"sendMessage","parameters":[{"name":"userId","in":"path","required":true,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Response"}}},"required":true},"responses":{"200":{"description":"Message sent","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Response"}}}}},"400":{"description":"One message of: user not exists; to send message self is forbidden, users are not friends","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Response"}}}}}}}},"/friend/unsubscribe/{userId}":{"post":{"tags":["API Controller"],"summary":"Unsubscribes user with path userId","operationId":"unsubscribe","parameters":[{"name":"userId","in":"path","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"User not exists","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Response"}}}}},"200":{"description":"One of messages: you are not subscribed; unsubscribed","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Response"}}}}},"500":{"description":"Internal server error: broken entryes in subscribe database","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Response"}}}}}}}},"/friend/subscribe/{userId}":{"post":{"tags":["API Controller"],"summary":"Subscribes on user with path userId","operationId":"subscribe","parameters":[{"name":"userId","in":"path","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"200":{"description":"One of messages: subscribed sucsessfully; you are friends alredy; you are subscriber alredy; friendship request passed","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Response"}}}}},"400":{"description":"One of messages: user not exists, to subsctibe self is forbidden","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Response"}}}}},"500":{"description":"Internal server error: broken entryes in subscribe database","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Response"}}}}}}}},"/account/new":{"post":{"tags":["API Controller"],"summary":"Unsecure. Registers new user","operationId":"registerUser","requestBody":{"description":"Id field is ignored and may be absent","content":{"application/json":{"schema":{"$ref":"#/components/schemas/User"}}},"required":true},"responses":{"400":{"description":"User alredy exists","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Response"}}}}},"201":{"description":"User registered successfully","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Response"}}}}}}}},"/account/login":{"post":{"tags":["API Controller"],"summary":"Unsecure. Logging in service. It returns JWT-token, which used for authentication for all secure endpoints. Client sends JWT in Authentication header with Bearer format. In Swagger-UI it may to attach JWT-token in each request, by entering it into Authorize-button.","operationId":"login","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/JwtRequest"}}},"required":true},"responses":{"200":{"description":"Message with JWT token, if username exists and password correct","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/JwtResponse"}}}}},"401":{"description":"Message with bad credentials information, if username or password incorrect","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Response"}}}}}}}},"/post/update":{"patch":{"tags":["API Controller"],"summary":"Updates posted messages","operationId":"updatePost","requestBody":{"description":"To update the post, user and dateAndTime fields is ignored and may be absent","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Post"}}},"required":true},"responses":{"400":{"description":"Post belongs another user, or not exists","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Response"}}}}},"200":{"description":"Post updated","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Response"}}}}}}}},"/post/show/{userId}":{"get":{"tags":["API Controller"],"summary":"Shows posted messages of user with path userId","operationId":"showPost","parameters":[{"name":"userId","in":"path","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"User not exists","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Response"}}}}},"200":{"description":"List of posted messages","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Response"}}}}}}}},"/post/newsfeed":{"get":{"tags":["API Controller"],"summary":"Shows posts of users, which subscribed on","operationId":"newsfeed","parameters":[{"name":"pageable","in":"query","description":"To form post list it need set page and sort parameters. Page-parameter minimal value is 0, size-parameter means number of posts on page. Sort parameter is an array, which includes sorted fiels and sorting direction. For example,to sort by id ascending and date in descending it need to set like in example.Directions asc or desc can be absent, asc by default.","required":true,"schema":{"$ref":"#/components/schemas/Pageable"},"example":{"page":0,"size":10,"sort":["user,asc","dateAndTime,desc"]}}],"responses":{"200":{"description":"Posts list","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Post"}}}}}}}},"/message/show/{userId}":{"get":{"tags":["API Controller"],"summary":"Shows message to user with path userId","operationId":"getMessages","parameters":[{"name":"userId","in":"path","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"User not exists","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Response"}}}}},"200":{"description":"Messages list","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Message"}}}}}}}},"/account":{"get":{"tags":["API Controller"],"summary":"Unsecure. Checks if user loggined or returns message with register instructions","operationId":"ifRegisterUser","responses":{"200":{"description":"Message with name of logined user or with register instructions, if user unloggined or jwt-token is expired","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Response"}}}}}}}},"/post/delete/{id}":{"delete":{"tags":["API Controller"],"summary":"Deletes posted messages with path id","operationId":"deletePost","parameters":[{"name":"id","in":"path","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Post belongs another user, or not exists","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Response"}}}}},"200":{"description":"Post deleted","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Response"}}}}}}}}},"components":{"schemas":{"Post":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"user":{"type":"integer","format":"int64"},"header":{"type":"string"},"content":{"type":"string"},"imageurl":{"type":"string"},"dateAndTime":{"type":"string","format":"date-time"}}},"Response":{"type":"object","properties":{"message":{"type":"string"}}},"User":{"type":"object","properties":{"user_id":{"type":"integer","format":"int64"},"name":{"type":"string"},"password":{"type":"string"},"email":{"type":"string"}}},"JwtRequest":{"type":"object","properties":{"username":{"type":"string"},"password":{"type":"string"}}},"JwtResponse":{"type":"object","properties":{"token":{"type":"string"}}},"Pageable":{"type":"object","properties":{"page":{"minimum":0,"type":"integer","format":"int32"},"size":{"minimum":1,"type":"integer","format":"int32"},"sort":{"type":"array","items":{"type":"string"}}}},"Message":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"fromUser":{"type":"integer","format":"int64"},"toUser":{"type":"integer","format":"int64"},"dateAndTime":{"type":"string","format":"date-time"},"content":{"type":"string"}}}},"securitySchemes":{"Bearer Authentication":{"type":"http","scheme":"bearer","bearerFormat":"JWT"}}}}